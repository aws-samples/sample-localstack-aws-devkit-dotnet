services:
  localstack:
    container_name: "${COMPOSE_PROJECT_NAME}-localstack"
    image: localstack/localstack
    ports:
      - 4566:4566
    environment:
      - DEBUG=${DEBUG:-0}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - SERVICES=sqs,sns,s3,sts,dynamodb,secretsmanager
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - WAIT_FOR_READY=1
      - EAGER_SERVICE_LOADING=1
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - ${NETWORK_NAME}
    healthcheck:
      test: curl --fail http://localhost:4566/_localstack/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    profiles: ["all", "infra"]

  database:
    container_name: "${COMPOSE_PROJECT_NAME}-database"
    image: postgres:15.3-alpine3.18
    networks:
      - ${NETWORK_NAME}
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 5s
      timeout: 10s
      retries: 3
    profiles: ["all", "db", "infra"]

  flyway:
    container_name: "${COMPOSE_PROJECT_NAME}-flyway"
    image: flyway/flyway:11.2.0
    networks:
      - ${NETWORK_NAME}
    volumes:
      - ../../flyway/all/order-management-system:/flyway/sql
    environment:
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
      FLYWAY_URL: jdbc:postgresql://database/${DATABASE_NAME}
      FLYWAY_USER: ${DATABASE_USER}
      FLYWAY_PASSWORD: ${DATABASE_PASSWORD}
      FLYWAY_CONNECT_RETRIES: 10
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    command: migrate
    depends_on:
      database:
        condition: service_healthy
    profiles: ["all", "db", "infra"]

  aws-setup:
    container_name: "${COMPOSE_PROJECT_NAME}-aws-setup"
    image: amazon/aws-cli
    env_file:
      - .env
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_DEFAULT_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - ${NETWORK_NAME}
    depends_on:
      localstack:
        condition: service_healthy
    volumes:
      - ./aws-setup.sh:/aws-setup.sh 
    entrypoint: [ "bash", "-c", "chmod +x /aws-setup.sh && /aws-setup.sh" ]
    profiles: ["all", "infra"]

  order-management-api:
    container_name: "${COMPOSE_PROJECT_NAME}-api"
    image: localstack-demo:latest
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - ${NETWORK_NAME}
    ports:
      - 8080:8080
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8080
      - DATABASE_CREDENTIALS_SECRET_ID=oms-db-secret
      - API_KEY_SECRET_ID=oms-api-key 
    depends_on:
      database:
        condition: service_healthy
      aws-setup:
        condition: service_completed_successfully
      flyway:
        condition: service_completed_successfully
    profiles: ["all"]

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME}-postgres-data
  localstack-data:
    name: ${COMPOSE_PROJECT_NAME}-localstack-data

networks:
  demo-network:
    name: ${NETWORK_NAME}
    driver: bridge